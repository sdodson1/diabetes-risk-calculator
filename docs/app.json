[{"name":"app.R","content":"# Diabetes Risk Calculator Shiny Application\r\n\r\n# Load required libraries\r\nlibrary(shiny)\r\n\r\n# Load the pre-trained model coefficients\r\nmodel_coefficients <- readRDS(\"data/model_coefficients.rds\")\r\n\r\ncalculate_diabetes_risk <- function(bmi_change_pct_centered, age_continuous, gender, baseline_a1c, baseline_bmi, ckd, cvd, smoking, hypertension, hyperlipidemia, comorbidity_count) {\r\n  # Create a data frame for input variables\r\n  input_data <- data.frame(\r\n    bmi_change_pct_centered = bmi_change_pct_centered,\r\n    age_continuous = age_continuous,\r\n    baseline_a1c = baseline_a1c,\r\n    baseline_bmi = baseline_bmi,\r\n    ckd = as.numeric(ckd),\r\n    cvd = as.numeric(cvd),\r\n    smoking = as.numeric(smoking),\r\n    hypertension = as.numeric(hypertension),\r\n    hyperlipidemia = as.numeric(hyperlipidemia),\r\n    comorbidity_count = comorbidity_count\r\n  )\r\n  \r\n  # Explicitly handle gender as a dummy variable\r\n  # If gender is 1 (Male), then genderM = 1, otherwise 0\r\n  input_data$genderM <- ifelse(as.numeric(gender) == 1, 1, 0)\r\n  \r\n  # Create a vector to match model coefficients\r\n  input_vector <- numeric(length(model_coefficients))\r\n  names(input_vector) <- names(model_coefficients)\r\n  \r\n  # Handle intercept term if present\r\n  if (\"(Intercept)\" %in% names(model_coefficients)) {\r\n    input_vector[\"(Intercept)\"] <- 1\r\n  }\r\n  \r\n  # Map input values to corresponding coefficients\r\n  for (name in names(model_coefficients)) {\r\n    if (name == \"(Intercept)\") next\r\n    if (name %in% names(input_data)) {\r\n      input_vector[name] <- as.numeric(input_data[[name]])\r\n    } else {\r\n      # Handle missing variable\r\n      warning(paste(\"Missing input variable:\", name))\r\n      input_vector[name] <- 0  # Default value\r\n    }\r\n  }\r\n  \r\n  # Calculate linear predictor using dot product\r\n  linear_predictor <- sum(input_vector * model_coefficients, na.rm = TRUE)\r\n  \r\n  # Calculate probability using logistic function\r\n  probability <- 1 / (1 + exp(-linear_predictor))\r\n  \r\n  # Convert to percentage\r\n  risk_percentage <- probability * 100\r\n  \r\n  return(risk_percentage)\r\n}\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Diabetes Risk Calculator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      numericInput(\"bmi_change_pct_centered\", \"BMI Change (% Centered):\", value = 0),\r\n      numericInput(\"age_continuous\", \"Age (Continuous):\", value = 30),\r\n      selectInput(\"gender\", \"Gender:\", choices = list(\"Female\" = 0, \"Male\" = 1)),\r\n      numericInput(\"baseline_a1c\", \"Baseline A1C:\", value = 5.7),\r\n      numericInput(\"baseline_bmi\", \"Baseline BMI:\", value = 25),\r\n      checkboxInput(\"ckd\", \"Chronic Kidney Disease:\", value = FALSE),\r\n      checkboxInput(\"cvd\", \"Cardiovascular Disease:\", value = FALSE),\r\n      checkboxInput(\"smoking\", \"Smoking:\", value = FALSE),\r\n      checkboxInput(\"hypertension\", \"Hypertension:\", value = FALSE),\r\n      checkboxInput(\"hyperlipidemia\", \"Hyperlipidemia:\", value = FALSE),\r\n      numericInput(\"comorbidity_count\", \"Comorbidity Count:\", value = 0),\r\n      actionButton(\"calculate\", \"Calculate Risk\")\r\n    ),\r\n    mainPanel(\r\n      textOutput(\"risk_output\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server\r\nserver <- function(input, output) {\r\n  observeEvent(input$calculate, {\r\n    risk <- calculate_diabetes_risk(\r\n      input$bmi_change_pct_centered,\r\n      input$age_continuous,\r\n      input$gender,\r\n      input$baseline_a1c,\r\n      input$baseline_bmi,\r\n      input$ckd,\r\n      input$cvd,\r\n      input$smoking,\r\n      input$hypertension,\r\n      input$hyperlipidemia,\r\n      input$comorbidity_count\r\n    )\r\n    output$risk_output <- renderText({\r\n      paste(\"Estimated Risk of Developing Diabetes: \", round(risk, 2), \"%\")\r\n    })\r\n  })\r\n}\r\n\r\n# Run the Shiny app\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"R/calculate_risk.R","content":"# File: /diabetes-risk-calculator/diabetes-risk-calculator/R/calculate_risk.R\n\ncalculate_diabetes_risk <- function(bmi_change_pct_centered, age_continuous, gender, baseline_a1c, baseline_bmi, ckd, cvd, smoking, hypertension, hyperlipidemia, comorbidity_count) {\n  # Load model coefficients\n  model_coefficients <- readRDS(\"data/model_coefficients.rds\")\n  \n  # Create a data frame for input variables\n  input_data <- data.frame(\n    bmi_change_pct_centered = bmi_change_pct_centered,\n    age_continuous = age_continuous,\n    gender = as.factor(gender),\n    baseline_a1c = baseline_a1c,\n    baseline_bmi = baseline_bmi,\n    ckd = as.numeric(ckd),\n    cvd = as.numeric(cvd),\n    smoking = as.numeric(smoking),\n    hypertension = as.numeric(hypertension),\n    hyperlipidemia = as.numeric(hyperlipidemia),\n    comorbidity_count = comorbidity_count\n  )\n  \n  # Create a vector to match model coefficients\n  input_vector <- numeric(length(model_coefficients))\n  names(input_vector) <- names(model_coefficients)\n  \n  # Handle intercept term if present\n  if (\"(Intercept)\" %in% names(model_coefficients)) {\n    input_vector[\"(Intercept)\"] <- 1\n  }\n  \n  # Map input values to corresponding coefficients\n  for (name in names(model_coefficients)) {\n    if (name == \"(Intercept)\") next\n    if (name %in% names(input_data)) {\n      input_vector[name] <- as.numeric(input_data[[name]])\n    } else {\n      # Handle missing variable\n      warning(paste(\"Missing input variable:\", name))\n      input_vector[name] <- 0  # Default value\n    }\n  }\n  \n  # Calculate linear predictor using dot product\n  linear_predictor <- sum(input_vector * model_coefficients, na.rm = TRUE)\n  \n  # Calculate probability using logistic function\n  probability <- 1 / (1 + exp(-linear_predictor))\n  \n  # Convert to percentage\n  risk_percentage <- probability * 100\n  \n  return(risk_percentage)\n}\n\ncalculate_risk <- function(input_data, model_coefficients) {\n  # Debug prints\n  cat(\"Input data types:\\n\")\n  print(sapply(input_data, class))\n  \n  # Convert all inputs to numeric\n  input_vector <- numeric(length(model_coefficients))\n  names(input_vector) <- names(model_coefficients)\n  \n  # Set intercept term\n  input_vector[1] <- 1\n  \n  # Fill the vector with user inputs (skipping intercept)\n  for (name in names(model_coefficients)[-1]) {\n    if (name %in% names(input_data)) {\n      input_vector[name] <- as.numeric(input_data[[name]])\n    } else {\n      # Handle missing variables\n      warning(paste(\"Missing input variable:\", name))\n      input_vector[name] <- 0  # Default to zero\n    }\n  }\n  \n  # Calculate linear predictor manually (avoid matrix multiplication)\n  linear_predictor <- sum(input_vector * model_coefficients)\n  \n  # Apply logistic function to get probability\n  probability <- 1 / (1 + exp(-linear_predictor))\n  \n  return(probability)\n}","type":"text"},{"name":"R/generate_report.R","content":"library(officer)\nlibrary(flextable)\n\ngenerate_report <- function(risk_percentage, input_data) {\n  # Create a new Word document\n  doc <- read_docx()\n  \n  # Add title\n  doc <- body_add_par(doc, \"Diabetes Risk Assessment Report\", style = \"heading 1\")\n  \n  # Add input data summary\n  doc <- body_add_par(doc, \"Input Data Summary:\", style = \"heading 2\")\n  input_summary <- data.frame(\n    Variable = names(input_data),\n    Value = unlist(input_data)\n  )\n  ft_input <- flextable(input_summary)\n  doc <- body_add_flextable(doc, ft_input)\n  \n  # Add risk percentage\n  doc <- body_add_par(doc, paste(\"Calculated Risk of Developing Diabetes: \", round(risk_percentage, 2), \"%\", sep = \"\"), style = \"heading 2\")\n  \n  # Add conclusion\n  doc <- body_add_par(doc, \"Conclusion:\", style = \"heading 2\")\n  doc <- body_add_par(doc, \"This report summarizes the calculated risk of developing diabetes based on the provided input data. Please consult with a healthcare professional for further advice.\", style = \"Normal\")\n  \n  # Save the document\n  output_file <- \"Diabetes_Risk_Report.docx\"\n  print(doc, target = output_file)\n  \n  return(output_file)\n}","type":"text"},{"name":"R/plot_functions.R","content":"# File: /diabetes-risk-calculator/diabetes-risk-calculator/R/plot_functions.R\n\nlibrary(ggplot2)\n\n# Function to plot the relationship between BMI change and diabetes risk\nplot_bmi_change_risk <- function(data, risk_column) {\n  ggplot(data, aes(x = bmi_change_pct_centered, y = !!sym(risk_column))) +\n    geom_point(alpha = 0.6) +\n    geom_smooth(method = \"loess\", color = \"blue\") +\n    labs(title = \"Relationship Between BMI Change and Diabetes Risk\",\n         x = \"BMI Change (%)\",\n         y = \"Diabetes Risk (%)\") +\n    theme_minimal()\n}\n\n# Function to plot the distribution of diabetes risk by gender\nplot_risk_by_gender <- function(data, risk_column) {\n  ggplot(data, aes(x = !!sym(risk_column), fill = gender)) +\n    geom_density(alpha = 0.5) +\n    labs(title = \"Distribution of Diabetes Risk by Gender\",\n         x = \"Diabetes Risk (%)\",\n         y = \"Density\") +\n    theme_minimal()\n}\n\n# Function to create a bar plot of average diabetes risk by age group\nplot_risk_by_age_group <- function(data, risk_column) {\n  data %>%\n    group_by(age_group) %>%\n    summarize(avg_risk = mean(!!sym(risk_column), na.rm = TRUE)) %>%\n    ggplot(aes(x = age_group, y = avg_risk, fill = age_group)) +\n    geom_bar(stat = \"identity\") +\n    labs(title = \"Average Diabetes Risk by Age Group\",\n         x = \"Age Group\",\n         y = \"Average Diabetes Risk (%)\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}","type":"text"},{"name":"README.md","content":"# Diabetes Risk Calculator\n\n## Overview\nThe Diabetes Risk Calculator is a Shiny application designed to estimate the percentage likelihood of developing diabetes based on various health and demographic factors. The application utilizes a logistic regression model trained on relevant data to provide users with personalized risk assessments.\n\n## Features\n- User-friendly interface for inputting health metrics and demographic information.\n- Calculation of diabetes risk percentage based on user inputs.\n- Visualization of risk factors and their impact on diabetes likelihood.\n- Option to generate reports summarizing the risk assessment.\n\n## Input Variables\nUsers are required to input the following variables:\n- **BMI Change Percentage (Centered)**: The percentage change in Body Mass Index (BMI) centered around the mean.\n- **Age (Continuous)**: The age of the user in years.\n- **Gender**: The gender of the user (e.g., Male, Female).\n- **Baseline A1C**: The baseline A1C level, a measure of blood sugar levels.\n- **Baseline BMI**: The baseline Body Mass Index (BMI) of the user.\n- **Chronic Kidney Disease (CKD)**: A binary indicator of whether the user has CKD.\n- **Cardiovascular Disease (CVD)**: A binary indicator of whether the user has CVD.\n- **Smoking Status**: A binary indicator of whether the user is a smoker.\n- **Hypertension**: A binary indicator of whether the user has hypertension.\n- **Hyperlipidemia**: A binary indicator of whether the user has hyperlipidemia.\n- **Comorbidity Count**: The number of comorbid conditions the user has.\n\n## Installation\nTo run the application, ensure you have R and the required packages installed. You can install the necessary packages using the `install_dependencies.R` script.\n\n```r\n# Run this in R to install required packages\nsource(\"install_dependencies.R\")\n```\n\n## Running the Application\nFollow these steps to run the Diabetes Risk Calculator:\n\n1. Make sure all dependencies are installed by running the installation script first.\n2. Open the project in RStudio.\n3. Navigate to the app directory:\n   - Load `app/global.R` first\n   - Then load `app/server.R` and `app/ui.R`\n4. Click the \"Run App\" button in RStudio or run:\n   ```r\n   shiny::runApp(\"app\")\n   ```\n5. Alternatively, you can run the application directly with:\n   ```r\n   source(\"deploy.R\")\n   ```\n6. Once the app is running:\n   - Enter your health metrics and demographic information in the left panel\n   - Click the \"Calculate Risk\" button\n   - View your calculated diabetes risk percentage in the right panel\n\n## Contribution\nContributions to improve the application are welcome. Please submit a pull request or open an issue for discussion.\n\n## License\nThis project is licensed under the MIT License. See the LICENSE file for more details.","type":"text"},{"name":"app/server.R","content":"library(shiny)\nlibrary(dplyr)\n\n# Load model coefficients\nmodel_coefficients <- readRDS(\"data/model_coefficients.rds\")\n\n# Function to calculate diabetes risk\ncalculate_diabetes_risk <- function(bmi_change_pct_centered, age_continuous, gender, baseline_a1c, baseline_bmi, ckd, cvd, smoking, hypertension, hyperlipidemia, comorbidity_count) {\n  # Create a data frame for input values\n  input_data <- data.frame(\n    bmi_change_pct_centered = bmi_change_pct_centered,\n    age_continuous = age_continuous,\n    gender = as.numeric(gender),  # Assuming gender is coded as 0 and 1\n    baseline_a1c = baseline_a1c,\n    baseline_bmi = baseline_bmi,\n    ckd = as.numeric(ckd),\n    cvd = as.numeric(cvd),\n    smoking = as.numeric(smoking),\n    hypertension = as.numeric(hypertension),\n    hyperlipidemia = as.numeric(hyperlipidemia),\n    comorbidity_count = comorbidity_count\n  )\n  \n  # Calculate the linear predictor\n  linear_predictor <- as.numeric(input_data %*% model_coefficients)\n  \n  # Convert linear predictor to probability using the logistic function\n  risk_percentage <- 1 / (1 + exp(-linear_predictor)) * 100\n  \n  return(risk_percentage)\n}\n\n# Define server logic\nshinyServer(function(input, output) {\n  \n  # Reactive expression to calculate risk based on user inputs\n  risk <- reactive({\n    req(input$bmi_change_pct_centered, input$age_continuous, input$gender, \n        input$baseline_a1c, input$baseline_bmi, input$ckd, input$cvd, \n        input$smoking, input$hypertension, input$hyperlipidemia, input$comorbidity_count)\n    \n    calculate_diabetes_risk(\n      bmi_change_pct_centered = input$bmi_change_pct_centered,\n      age_continuous = input$age_continuous,\n      gender = input$gender,\n      baseline_a1c = input$baseline_a1c,\n      baseline_bmi = input$baseline_bmi,\n      ckd = input$ckd,\n      cvd = input$cvd,\n      smoking = input$smoking,\n      hypertension = input$hypertension,\n      hyperlipidemia = input$hyperlipidemia,\n      comorbidity_count = input$comorbidity_count\n    )\n  })\n  \n  # Output the risk percentage\n  output$risk_percentage <- renderText({\n    paste(\"Estimated risk of developing diabetes:\", round(risk(), 2), \"%\")\n  })\n})","type":"text"},{"name":"app/ui.R","content":"library(shiny)\n\n# Define the user interface for the diabetes risk calculator\nui <- fluidPage(\n  titlePanel(\"Diabetes Risk Calculator\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"bmi_change_pct_centered\", \n                   \"BMI Change Percentage (Centered):\", \n                   value = 0, \n                   min = -100, \n                   max = 100),\n      \n      numericInput(\"age_continuous\", \n                   \"Age (Continuous):\", \n                   value = 30, \n                   min = 0, \n                   max = 120),\n      \n      selectInput(\"gender\", \n                  \"Gender:\", \n                  choices = c(\"Male\", \"Female\")),\n      \n      numericInput(\"baseline_a1c\", \n                   \"Baseline A1C (%):\", \n                   value = 5.7, \n                   min = 4, \n                   max = 15),\n      \n      numericInput(\"baseline_bmi\", \n                   \"Baseline BMI:\", \n                   value = 25, \n                   min = 10, \n                   max = 50),\n      \n      checkboxInput(\"ckd\", \"Chronic Kidney Disease\", value = FALSE),\n      checkboxInput(\"cvd\", \"Cardiovascular Disease\", value = FALSE),\n      checkboxInput(\"smoking\", \"Smoking Status\", value = FALSE),\n      checkboxInput(\"hypertension\", \"Hypertension\", value = FALSE),\n      checkboxInput(\"hyperlipidemia\", \"Hyperlipidemia\", value = FALSE),\n      \n      numericInput(\"comorbidity_count\", \n                   \"Number of Comorbidities:\", \n                   value = 0, \n                   min = 0, \n                   max = 10),\n      \n      actionButton(\"calculate\", \"Calculate Risk\")\n    ),\n    \n    mainPanel(\n      h3(\"Calculated Risk of Developing Diabetes:\"),\n      verbatimTextOutput(\"risk_output\")\n    )\n  )\n)","type":"text"},{"name":"app/global.R","content":"library(shiny)\r\nlibrary(dplyr)\r\nlibrary(readr)\r\n\r\n# Load model coefficients for diabetes risk calculation\r\nsetwd(\"C:/Lourdes/prediabetes/diabetes-risk-calculator\")\r\nmodel_coefficients <- readRDS(\"data/model_coefficients.rds\")\r\n\r\n# Function to calculate diabetes risk based on user inputs\r\ncalculate_diabetes_risk <- function(bmi_change_pct_centered, age_continuous, gender, baseline_a1c, baseline_bmi, ckd, cvd, smoking, hypertension, hyperlipidemia, comorbidity_count) {\r\n  # Create a data frame for input values\r\n  input_data <- data.frame(\r\n    bmi_change_pct_centered = bmi_change_pct_centered,\r\n    age_continuous = age_continuous,\r\n    gender = as.numeric(gender),  # Assuming gender is coded as 0 and 1\r\n    baseline_a1c = baseline_a1c,\r\n    baseline_bmi = baseline_bmi,\r\n    ckd = as.numeric(ckd),\r\n    cvd = as.numeric(cvd),\r\n    smoking = as.numeric(smoking),\r\n    hypertension = as.numeric(hypertension),\r\n    hyperlipidemia = as.numeric(hyperlipidemia),\r\n    comorbidity_count = comorbidity_count\r\n  )\r\n  \r\n  # Calculate the linear predictor using the model coefficients\r\n  linear_predictor <- as.numeric(input_data %*% model_coefficients)\r\n  \r\n  # Convert linear predictor to probability using the logistic function\r\n  risk_percentage <- 1 / (1 + exp(-linear_predictor)) * 100\r\n  \r\n  return(risk_percentage)\r\n}","type":"text"},{"name":"app/www/custom.css","content":"body {\n    font-family: Arial, sans-serif;\n    background-color: #f8f9fa;\n    color: #343a40;\n}\n\nh1, h2, h3 {\n    color: #007bff;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.input-group {\n    margin-bottom: 15px;\n}\n\n.label {\n    font-weight: bold;\n}\n\n.input-field {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ced4da;\n    border-radius: 4px;\n}\n\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n.result {\n    margin-top: 20px;\n    padding: 15px;\n    border: 1px solid #28a745;\n    border-radius: 4px;\n    background-color: #d4edda;\n    color: #155724;\n}","type":"text"},{"name":"app/www/logo.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"100\">\n  <rect width=\"100%\" height=\"100%\" fill=\"#4CAF50\"/>\n  <text x=\"50%\" y=\"50%\" font-size=\"24\" fill=\"white\" text-anchor=\"middle\" alignment-baseline=\"middle\">Diabetes Risk Calculator<\/text>\n<\/svg>","type":"text"},{"name":"data/_shinylive.json","content":"{\r\n  \"resources\": {\r\n    \"model_coefficients.rds\": {\r\n      \"type\": \"binary\"\r\n    }\r\n  }\r\n}\r\n","type":"text"},{"name":"data/model_coefficients.rds","content":"H4sIAAAAAAAABovgYmBgYGZgYWJiYGYFMhlYQ0PcdC0YGJj4gByeA6bLja4o/F1vP0lIv1Ug\nnnX/BOUPi70zS+1PsNQXsHyVdOD05J/sP/OYfa+Ul2uF02f7PfteuOjwzrTvO9gWtf++wv5V\nN35sj31dZ7//iMvSet839tcdTeNs/BLtZxXwiq3yP8sAtBloDyMDCwMnyPK8xNzUYiBDAGQ5\nVJBbwzOvJLUoObWgRBMqJJ6UmxmfnJGYl54aX5BcEp+cClKRmgKV5ksEiifn55Vk5pXmlxZD\nRdnTU/NSUot8oVyepMTi1JzMvNT4RMNkDDGgBVAx5uTsFDizDMZkL87Nz87MS4dpzKgsSC0q\nSc0rzszPg7kCLJaTWZCZkpqbmQgVFUzOz80vSspMySypBLqxNK8EKPgPAIhy0xSHAQAA","type":"binary"},{"name":"deploy.R","content":"# Simple deployment script for the Diabetes Risk Calculator\r\n\r\n\r\n# Load the pre-trained model coefficients\r\nmodel_coefficients <- readRDS(\"data/model_coefficients.rds\")\r\n\r\ncalculate_diabetes_risk <- function(bmi_change_pct_centered, age_continuous, gender, baseline_a1c, baseline_bmi, ckd, cvd, smoking, hypertension, hyperlipidemia, comorbidity_count) {\r\n  # Load model coefficients\r\n  model_coefficients <- readRDS(\"data/model_coefficients.rds\")\r\n  \r\n  # Create a data frame for input variables\r\n  input_data <- data.frame(\r\n    bmi_change_pct_centered = bmi_change_pct_centered,\r\n    age_continuous = age_continuous,\r\n    baseline_a1c = baseline_a1c,\r\n    baseline_bmi = baseline_bmi,\r\n    ckd = as.numeric(ckd),\r\n    cvd = as.numeric(cvd),\r\n    smoking = as.numeric(smoking),\r\n    hypertension = as.numeric(hypertension),\r\n    hyperlipidemia = as.numeric(hyperlipidemia),\r\n    comorbidity_count = comorbidity_count\r\n  )\r\n  \r\n  # Explicitly handle gender as a dummy variable\r\n  # If gender is 1 (Male), then genderM = 1, otherwise 0\r\n  input_data$genderM <- ifelse(as.numeric(gender) == 1, 1, 0)\r\n  \r\n  # Create a vector to match model coefficients\r\n  input_vector <- numeric(length(model_coefficients))\r\n  names(input_vector) <- names(model_coefficients)\r\n  \r\n  # Handle intercept term if present\r\n  if (\"(Intercept)\" %in% names(model_coefficients)) {\r\n    input_vector[\"(Intercept)\"] <- 1\r\n  }\r\n  \r\n  # Map input values to corresponding coefficients\r\n  for (name in names(model_coefficients)) {\r\n    if (name == \"(Intercept)\") next\r\n    if (name %in% names(input_data)) {\r\n      input_vector[name] <- as.numeric(input_data[[name]])\r\n    } else {\r\n      # Handle missing variable\r\n      warning(paste(\"Missing input variable:\", name))\r\n      input_vector[name] <- 0  # Default value\r\n    }\r\n  }\r\n  \r\n  # Calculate linear predictor using dot product\r\n  linear_predictor <- sum(input_vector * model_coefficients, na.rm = TRUE)\r\n  \r\n  # Calculate probability using logistic function\r\n  probability <- 1 / (1 + exp(-linear_predictor))\r\n  \r\n  # Convert to percentage\r\n  risk_percentage <- probability * 100\r\n  \r\n  return(risk_percentage)\r\n}\r\n\r\ncalculate_risk <- function(input_data, model_coefficients) {\r\n  # Debug prints\r\n  cat(\"Input data types:\\n\")\r\n  print(sapply(input_data, class))\r\n  \r\n  # Convert all inputs to numeric\r\n  input_vector <- numeric(length(model_coefficients))\r\n  names(input_vector) <- names(model_coefficients)\r\n  \r\n  # Set intercept term\r\n  input_vector[1] <- 1\r\n  \r\n  # Fill the vector with user inputs (skipping intercept)\r\n  for (name in names(model_coefficients)[-1]) {\r\n    if (name %in% names(input_data)) {\r\n      input_vector[name] <- as.numeric(input_data[[name]])\r\n    } else {\r\n      # Handle missing variables\r\n      warning(paste(\"Missing input variable:\", name))\r\n      input_vector[name] <- 0  # Default to zero\r\n    }\r\n  }\r\n  \r\n  # Calculate linear predictor manually (avoid matrix multiplication)\r\n  linear_predictor <- sum(input_vector * model_coefficients)\r\n  \r\n  # Apply logistic function to get probability\r\n  probability <- 1 / (1 + exp(-linear_predictor))\r\n  \r\n  return(probability)\r\n}\r\n\r\n\r\n\r\n# Define the Shiny application\r\nshinyApp(\r\n  ui = fluidPage(\r\n    titlePanel(\"Diabetes Risk Calculator\"),\r\n    sidebarLayout(\r\n      sidebarPanel(\r\n        numericInput(\"bmi_change_pct_centered\", \"BMI Change (% Centered):\", value = 0),\r\n        numericInput(\"age_continuous\", \"Age (Continuous):\", value = 30),\r\n        selectInput(\"gender\", \"Gender:\", choices = list(\"Female\" = 0, \"Male\" = 1)),\r\n        numericInput(\"baseline_a1c\", \"Baseline A1C:\", value = 5.7),\r\n        numericInput(\"baseline_bmi\", \"Baseline BMI:\", value = 25),\r\n        checkboxInput(\"ckd\", \"Chronic Kidney Disease:\", value = FALSE),\r\n        checkboxInput(\"cvd\", \"Cardiovascular Disease:\", value = FALSE),\r\n        checkboxInput(\"smoking\", \"Smoking:\", value = FALSE),\r\n        checkboxInput(\"hypertension\", \"Hypertension:\", value = FALSE),\r\n        checkboxInput(\"hyperlipidemia\", \"Hyperlipidemia:\", value = FALSE),\r\n        numericInput(\"comorbidity_count\", \"Comorbidity Count:\", value = 0),\r\n        actionButton(\"calculate\", \"Calculate Risk\")\r\n      ),\r\n      mainPanel(\r\n        textOutput(\"risk_output\")\r\n      )\r\n    )\r\n  ),\r\n  server = function(input, output) {\r\n    observeEvent(input$calculate, {\r\n      risk <- calculate_diabetes_risk(\r\n        input$bmi_change_pct_centered,\r\n        input$age_continuous,\r\n        input$gender,\r\n        input$baseline_a1c,\r\n        input$baseline_bmi,\r\n        input$ckd,\r\n        input$cvd,\r\n        input$smoking,\r\n        input$hypertension,\r\n        input$hyperlipidemia,\r\n        input$comorbidity_count\r\n      )\r\n      output$risk_output <- renderText({\r\n        paste(\"Estimated Risk of Developing Diabetes: \", round(risk, 2), \"%\")\r\n      })\r\n    })\r\n  }\r\n)","type":"text"},{"name":"diabetes-risk-calculator.Rproj","content":"name: Diabetes Risk Calculator\nversion: 1.0\noutput_dir: app\nignore: \n  - .Rproj.user\n  - .Rhistory\n  - .RData\n  - .Ruserdata\n  - renv.lock\n  - data/model_coefficients.rds\n  - tests/test_calculations.R\n  - deploy.R\n  - install_dependencies.R\n  - README.md\n  - app/www/custom.css\n  - app/www/logo.svg\n  - app/global.R\n  - app/server.R\n  - app/ui.R\n  - R/calculate_risk.R\n  - R/generate_report.R\n  - R/plot_functions.R\n  - app/www/custom.css\n  - app/www/logo.svg\n  - data/model_coefficients.rds\n  - R/calculate_risk.R\n  - R/generate_report.R\n  - R/plot_functions.R\n  - tests/test_calculations.R\n  - deploy.R\n  - install_dependencies.R\n  - README.md","type":"text"},{"name":"install_dependencies.R","content":"# install_dependencies.R\nif (!requireNamespace(\"shiny\", quietly = TRUE)) {\n  install.packages(\"shiny\")\n}\n\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\nif (!requireNamespace(\"broom\", quietly = TRUE)) {\n  install.packages(\"broom\")\n}\n\nif (!requireNamespace(\"flextable\", quietly = TRUE)) {\n  install.packages(\"flextable\")\n}\n\nif (!requireNamespace(\"officer\", quietly = TRUE)) {\n  install.packages(\"officer\")\n}\n\nif (!requireNamespace(\"pROC\", quietly = TRUE)) {\n  install.packages(\"pROC\")\n}\n\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\n\nif (!requireNamespace(\"renv\", quietly = TRUE)) {\n  install.packages(\"renv\")\n}","type":"text"},{"name":"renv.lock","content":"{\n  \"packages\": {\n    \"R\": {\n      \"version\": \"4.1.0\",\n      \"source\": \"CRAN\",\n      \"repositories\": [\n        \"https://cloud.r-project.org\"\n      ],\n      \"dependencies\": {\n        \"shiny\": {\n          \"version\": \"1.6.0\"\n        },\n        \"dplyr\": {\n          \"version\": \"1.0.7\"\n        },\n        \"ggplot2\": {\n          \"version\": \"3.3.5\"\n        },\n        \"broom\": {\n          \"version\": \"0.7.9\"\n        },\n        \"flextable\": {\n          \"version\": \"0.6.7\"\n        },\n        \"officer\": {\n          \"version\": \"0.3.18\"\n        },\n        \"pROC\": {\n          \"version\": \"1.18.0\"\n        },\n        \"data.table\": {\n          \"version\": \"1.14.0\"\n        }\n      }\n    }\n  },\n  \"hash\": \"d2f3a4b5c6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e\"\n}","type":"text"},{"name":"tests/test_calculations.R","content":"library(testthat)\nsource(\"../R/calculate_risk.R\")\n\ntest_that(\"Risk calculation is accurate\", {\n  # Test case 1: Example input values\n  input_values <- list(\n    bmi_change_pct_centered = 5,\n    age_continuous = 45,\n    gender = \"Male\",\n    baseline_a1c = 6.0,\n    baseline_bmi = 28,\n    ckd = 0,\n    cvd = 0,\n    smoking = 1,\n    hypertension = 1,\n    hyperlipidemia = 0,\n    comorbidity_count = 2\n  )\n  \n  expected_risk <- 0.25  # Replace with the expected risk based on the model\n  \n  calculated_risk <- calculate_risk(input_values)\n  \n  expect_equal(calculated_risk, expected_risk, tolerance = 0.01)\n})\n\ntest_that(\"Risk calculation handles edge cases\", {\n  # Test case 2: Minimum input values\n  input_values_min <- list(\n    bmi_change_pct_centered = 0,\n    age_continuous = 18,\n    gender = \"Female\",\n    baseline_a1c = 5.0,\n    baseline_bmi = 18.5,\n    ckd = 0,\n    cvd = 0,\n    smoking = 0,\n    hypertension = 0,\n    hyperlipidemia = 0,\n    comorbidity_count = 0\n  )\n  \n  calculated_risk_min <- calculate_risk(input_values_min)\n  \n  expect_true(calculated_risk_min >= 0 && calculated_risk_min <= 1)\n  \n  # Test case 3: Maximum input values\n  input_values_max <- list(\n    bmi_change_pct_centered = 20,\n    age_continuous = 80,\n    gender = \"Male\",\n    baseline_a1c = 10.0,\n    baseline_bmi = 40,\n    ckd = 1,\n    cvd = 1,\n    smoking = 1,\n    hypertension = 1,\n    hyperlipidemia = 1,\n    comorbidity_count = 5\n  )\n  \n  calculated_risk_max <- calculate_risk(input_values_max)\n  \n  expect_true(calculated_risk_max >= 0 && calculated_risk_max <= 1)\n})","type":"text"}]
